import React, { useEffect, useRef, useState } from "react";
/* Full single-file app: Read/Quiz/Write with undo/redo trace canvas.
   This is the same app content prepared earlier. */
const hiraganaSets = {
  basic: {"„ÅÇ":"a","„ÅÑ":"i","„ÅÜ":"u","„Åà":"e","„Åä":"o","„Åã":"ka","„Åç":"ki","„Åè":"ku","„Åë":"ke","„Åì":"ko","„Åï":"sa","„Åó":"shi","„Åô":"su","„Åõ":"se","„Åù":"so","„Åü":"ta","„Å°":"chi","„Å§":"tsu","„Å¶":"te","„Å®":"to","„Å™":"na","„Å´":"ni","„Å¨":"nu","„Å≠":"ne","„ÅÆ":"no","„ÅØ":"ha","„Å≤":"hi","„Åµ":"fu","„Å∏":"he","„Åª":"ho","„Åæ":"ma","„Åø":"mi","„ÇÄ":"mu","„ÇÅ":"me","„ÇÇ":"mo","„ÇÑ":"ya","„ÇÜ":"yu","„Çà":"yo","„Çâ":"ra","„Çä":"ri","„Çã":"ru","„Çå":"re","„Çç":"ro","„Çè":"wa","„Çí":"wo","„Çì":"n"},
  youon: {},
  dakouon: {},
  handakouon: {}
};
const mnemonics = {};
Object.entries({...hiraganaSets.basic}).forEach(([k,v])=> mnemonics[k]=`Hint for ${k} (${v})`);
const strokeData = {"„ÅÇ":["M40 20 C20 20 10 60 50 70","M50 70 C90 80 80 40 60 30","M25 95 C45 85 65 85 85 95"],"„ÅÑ":["M40 20 C40 40 40 60 40 80"],"„ÅÜ":["M30 30 C45 20 70 20 60 45","M60 45 C50 70 30 80 20 95"],"„Åà":["M20 30 C50 10 80 30 60 50","M30 60 C70 60 80 80 40 90"],"„Åä":["M35 25 C20 40 20 70 50 75","M50 75 C80 80 80 50 60 40","M20 95 C40 85 60 85 80 95"],"„Åã":["M20 20 L20 80","M20 40 C50 30 60 20 80 30","M35 60 L75 60"],"„Åç":["M20 20 L20 80","M40 35 L80 35","M40 60 L80 60"],"„Åè":["M30 30 C50 25 60 40 40 50"],"„Åë":["M20 20 L20 80","M30 40 C60 30 80 25 80 55"],"„Åì":["M25 30 L75 30","M25 60 L75 60"]};
function useAudio(url){const ref=useRef(null);useEffect(()=>{ref.current=new Audio(url)},[url]);return ref;}
function StrokeSVG({char,playKey}){const strokes=strokeData[char]||[];return (<svg viewBox="0 0 100 120" width={220} height={260}><style>{`@keyframes draw{to{stroke-dashoffset:0}}`}</style>{strokes.map((d,i)=>(<path key={i} d={d} fill="none" stroke="#222" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round" style={{strokeDasharray:400,strokeDashoffset:400,animation: playKey?`draw 0.6s ${i*0.6}s forwards ease-out`:'none'}}/>))}</svg>);}
export default function App(){
  const [screen,setScreen]=useState("modeSelect");
  const correctRef=useAudio("https://cdn.pixabay.com/download/audio/2022/03/15/audio_0a3b4b2a32.mp3?filename=koto-ding.mp3");
  const wrongRef=useAudio("https://cdn.pixabay.com/download/audio/2022/03/15/audio_3c12e76b45.mp3?filename=woodblock-hit.mp3");
  // quiz
  const [quizList,setQuizList]=useState(Object.entries(hiraganaSets.basic).sort(()=>Math.random()-0.5));
  const [qIndex,setQIndex]=useState(0);
  const [qAnswer,setQAnswer]=useState("");
  const [qResults,setQResults]=useState([]);
  // read
  const [readFilter,setReadFilter]=useState("basic");
  const [readQuery,setReadQuery]=useState("");
  // write
  const canvasRef=useRef(null); const ctxRef=useRef(null); const drawingRef=useRef(false);
  const [writeChars]=useState(Object.keys(hiraganaSets.basic));
  const [writeIndex,setWriteIndex]=useState(0);
  const [playKey,setPlayKey]=useState(false);
  const historyRef=useRef([]); const redoRef=useRef([]); const HISTORY_LIMIT=25;
  useEffect(()=>{const c=canvasRef.current; if(!c) return; c.width=240;c.height=240; const ctx=c.getContext('2d'); ctx.lineCap='round';ctx.lineJoin='round';ctx.lineWidth=8;ctx.strokeStyle='#222'; ctxRef.current=ctx; redrawFromHistory();},[screen]);
  function getPos(e,ref=canvasRef){const rect=ref.current.getBoundingClientRect(); const touch=e.touches&&e.touches[0]; const clientX=touch?touch.clientX:e.clientX; const clientY=touch?touch.clientY:e.clientY; return {x:clientX-rect.left,y:clientY-rect.top};}
  function startStroke(e){drawingRef.current=true; const p=getPos(e); const stroke=[{x:p.x,y:p.y}]; historyRef.current.push(stroke); if(historyRef.current.length>HISTORY_LIMIT) historyRef.current.shift(); redoRef.current=[]; drawPoint(p,true);}
  function moveStroke(e){ if(!drawingRef.current) return; const p=getPos(e); const stroke=historyRef.current[historyRef.current.length-1]; stroke.push({x:p.x,y:p.y}); drawPoint(p,false);}
  function endStroke(){ drawingRef.current=false;}
  function drawPoint(p,moveTo=false){ const ctx=ctxRef.current; if(!ctx) return; if(moveTo){ ctx.beginPath(); ctx.moveTo(p.x,p.y);} else { ctx.lineTo(p.x,p.y); ctx.stroke(); } }
  function clearCanvas(){ const ctx=ctxRef.current; if(!ctx) return; ctx.clearRect(0,0,ctx.canvas.width,ctx.canvas.height); redoRef.current=[]; }
  function redrawFromHistory(){ const ctx=ctxRef.current; if(!ctx) return; ctx.clearRect(0,0,ctx.canvas.width,ctx.canvas.height); for(let s of historyRef.current){ ctx.beginPath(); ctx.moveTo(s[0].x,s[0].y); for(let i=1;i<s.length;i++) ctx.lineTo(s[i].x,s[i].y); ctx.stroke(); } }
  function undo(){ if(historyRef.current.length===0) return; const s=historyRef.current.pop(); redoRef.current.push(s); redrawFromHistory(); }
  function redo(){ if(redoRef.current.length===0) return; const s=redoRef.current.pop(); historyRef.current.push(s); redrawFromHistory(); }
  function handleQuizKey(e){ if(e.key==='Enter'){ e.preventDefault(); submitQuizAnswer(); } }
  function submitQuizAnswer(){ if(!quizList.length) return; const correct=quizList[qIndex][1]; const isCorrect = qAnswer.trim().toLowerCase()===correct; if(isCorrect) correctRef.current?.play(); else wrongRef.current?.play(); setQResults(prev=>[...prev,{char:quizList[qIndex][0],user:qAnswer.trim().toLowerCase(),correct,isCorrect}]); setQAnswer(''); if(qIndex+1<quizList.length) setQIndex(qIndex+1); else setScreen('finished'); }
  function readEntries(){ let entries=Object.entries(hiraganaSets.basic); if(readFilter!=='all' && readFilter in hiraganaSets) entries=Object.entries(hiraganaSets[readFilter]); if(readQuery.trim()){ const q=readQuery.trim().toLowerCase(); entries=entries.filter(([ch,ro])=> ch.includes(q) || ro.includes(q)); } return entries; }
  function playModel(){ setPlayKey(false); setTimeout(()=>setPlayKey(true),50); setTimeout(()=>setPlayKey(false),2500); correctRef.current?.play(); }
  if(screen==="modeSelect"){ return (<div className="min-h-screen flex items-center justify-center p-6 bg-[#FFF8F0]"><div className="max-w-4xl w-full text-center"><h1 className="text-4xl font-bold mb-6 text-red-600">Nihongo Reviewer</h1><div className="grid grid-cols-1 md:grid-cols-3 gap-6"><button onClick={()=>{setScreen('readMode'); setReadFilter('basic')}} className="p-6 rounded-2xl bg-yellow-100 border-2 border-red-400 shadow">üîé Read / Review</button><button onClick={()=>{ setScreen('quizMode'); setQuizList(Object.entries(hiraganaSets.basic).sort(()=>Math.random()-0.5)); setQIndex(0); setQResults([]); }} className="p-6 rounded-2xl bg-white border-2 border-blue-400 shadow">üß† Quiz Mode</button><button onClick={()=>{ setScreen('writeMode'); }} className="p-6 rounded-2xl bg-blue-100 border-2 border-blue-500 shadow">‚úçÔ∏è Write Mode</button></div></div></div>); }
  if(screen==="readMode"){ const entries=readEntries(); return (<div className="min-h-screen p-6 bg-[#FFF8F0]"><div className="max-w-5xl mx-auto"><div className="flex items-center justify-between mb-4"><button onClick={()=>setScreen('modeSelect')} className="px-3 py-2 bg-blue-400 text-white rounded">‚Üê Back</button><h2 className="text-2xl text-red-600 font-bold">„Å≤„Çâ„Åå„Å™Â≠¶Áøí„É¢„Éº„Éâ ‚Äî Read / Review</h2><div/></div><div className="flex gap-3 items-center mb-4"><div className="flex space-x-2">{['basic','youon','dakouon','handakouon','all'].map(t=> (<button key={t} onClick={()=>setReadFilter(t)} className={`px-3 py-2 rounded ${readFilter===t ? 'bg-red-600 text-white' : 'bg-yellow-100 text-red-700'}`}>{t==='all'?'All':t.charAt(0).toUpperCase()+t.slice(1)}</button>))}</div><div className="ml-auto flex items-center gap-2"><input value={readQuery} onChange={e=>setReadQuery(e.target.value)} placeholder="Search Hiragana or Romaji... (e.g., „Åã or ka)" className="px-3 py-2 rounded border" /><button onClick={()=>{ setReadQuery(''); setReadFilter('basic'); }} className="px-3 py-2 bg-blue-200 rounded">Reset</button></div></div><div className="bg-white rounded shadow overflow-hidden"><table className="w-full text-left"><thead className="bg-yellow-100"><tr><th className="p-3 border">Hiragana</th><th className="p-3 border">Romaji</th><th className="p-3 border">Mnemonic Hint</th></tr></thead><tbody>{entries.map(([ch,ro])=>(<tr key={ch} className="hover:bg-blue-50"><td className="p-3 border text-2xl text-red-600">{ch}</td><td className="p-3 border text-blue-700">{ro}</td><td className="p-3 border text-yellow-800">{mnemonics[ch]}</td></tr>))}</tbody></table></div><div className="mt-6 flex gap-3"><button onClick={()=>setScreen("modeSelect")} className="px-4 py-2 bg-red-500 text-white rounded">Back</button><button onClick={()=>{ setScreen("quizMode"); setQuizList(Object.entries(hiraganaSets.basic).sort(()=>Math.random()-0.5)); setQIndex(0); setQResults([]); }} className="px-4 py-2 bg-blue-600 text-white rounded">Quiz Basic</button></div></div></div>); }
  if(screen==="quizMode"){ const current=quizList[qIndex]; return (<div className="min-h-screen p-6 flex items-center justify-center bg-[#FFF8F0]"><div className="text-center"><h2 className="text-3xl text-red-600 mb-6">Hiragana Quiz</h2><div className="text-8xl text-red-600 font-bold mb-6">{current?.[0]}</div><input value={qAnswer} onChange={e=>setQAnswer(e.target.value)} onKeyDown={handleQuizKey} placeholder="type romaji and press Enter" autoFocus className="border-4 text-2xl p-3 rounded-xl text-center w-56 mb-4 focus:outline-none"/><div className="flex gap-3 justify-center mb-4"><button onClick={submitQuizAnswer} className="px-4 py-2 bg-red-500 text-white rounded">Submit</button><button onClick={()=>setScreen("modeSelect")} className="px-4 py-2 bg-blue-400 text-white rounded">Quit</button></div><div className="text-yellow-700">Question {qIndex+1} of {quizList.length}</div></div></div>); }
  if(screen==="finished"){ return (<div className="min-h-screen p-6 flex items-center justify-center bg-[#FFF8F0]"><div className="max-w-3xl w-full text-center bg-white p-6 rounded shadow"><h2 className="text-3xl text-red-600 mb-3">Quiz Finished</h2><p className="text-xl text-blue-700 mb-4">Score: {qResults.filter(r=>r.isCorrect).length} / {qResults.length}</p><div className="bg-white border p-4 rounded mb-4"><h3 className="font-semibold mb-2">Results</h3><ul className="text-left max-h-48 overflow-y-auto space-y-2">{qResults.map((r,i)=>(<li key={i} className={r.isCorrect?'text-green-600':'text-red-600'}>{r.char} ‚Üí {r.user || '(blank)'} {r.isCorrect ? '‚úÖ' : `‚ùå (Correct: ${r.correct})`}</li>))}</ul></div><div className="flex gap-3 justify-center"><button onClick={()=>setScreen("readMode")} className="px-4 py-2 bg-yellow-300 text-red-800 rounded">Review All</button><button onClick={()=>{ const wrong = Object.fromEntries(qResults.filter(x=>!x.isCorrect).map(r=>[r.char,r.correct])); setScreen('readMode'); setReadFilter('all'); }} className="px-4 py-2 bg-blue-400 text-white rounded">View Read Mode</button><button onClick={()=>{ const wrong = Object.fromEntries(qResults.filter(x=>!x.isCorrect).map(r=>[r.char,r.correct])); setQuizList(Object.entries(wrong)); setQIndex(0); setQResults([]); setScreen('quizMode'); }} className="px-4 py-2 bg-red-500 text-white rounded">Quiz Wrong Only</button></div><div className="mt-4 flex justify-center gap-3"><button onClick={()=>{ setScreen('modeSelect'); setQResults([]); }} className="px-4 py-2 bg-red-500 text-white rounded">Back to Menu</button></div></div></div>); }
  if(screen==="writeMode"){ const ch=writeChars[writeIndex]; return (<div className="min-h-screen p-6 bg-[#FFF8F0]"><div className="max-w-4xl mx-auto bg-white p-6 rounded shadow"><div className="flex items-center justify-between mb-4"><button onClick={()=>setScreen('modeSelect')} className="px-3 py-2 bg-blue-400 text-white rounded">‚Üê Back</button><h3 className="text-2xl text-red-600">Write Mode ‚Äî Trace & Practice</h3><div></div></div><div className="grid grid-cols-2 gap-6"><div className="flex flex-col items-center"><div className="text-lg mb-2">Model (auto)</div><div className="bg-yellow-50 p-2 rounded"><StrokeSVG char={ch} playKey={playKey} /></div><div className="mt-3 flex gap-3"><button onClick={()=>playModel()} className="px-3 py-2 bg-red-500 text-white rounded">Play</button></div></div><div className="flex flex-col items-center"><div className="text-lg mb-2">Trace Area</div><div style={{width:240,height:240,border:'2px solid #2a4b8d'}}><canvas ref={canvasRef} onMouseDown={startStroke} onMouseMove={moveStroke} onMouseUp={endStroke} onMouseLeave={endStroke} onTouchStart={startStroke} onTouchMove={moveStroke} onTouchEnd={endStroke} style={{width:240,height:240,touchAction:'none'}}/></div><div className="mt-3 flex gap-2"><button onClick={undo} className="px-3 py-2 bg-yellow-300 rounded">Undo</button><button onClick={redo} className="px-3 py-2 bg-yellow-300 rounded">Redo</button><button onClick={()=>{ historyRef.current=[]; redoRef.current=[]; clearCanvas(); }} className="px-3 py-2 bg-red-500 text-white rounded">Clear</button><button onClick={()=>{ setWriteIndex((i)=> (i+1)%writeChars.length); historyRef.current=[]; redoRef.current=[]; clearCanvas(); }} className="px-3 py-2 bg-blue-400 text-white rounded">Next</button></div></div></div></div></div>); }
  return <div className="p-6">Loading...</div>;
}
